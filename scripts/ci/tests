#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

ROOT="$(realpath "$(dirname "$0")"/../../)"
SCHEMES=(mlkem512 mlkem768 mlkem1024)

base_test()
{
  local TEST_TYPE="$1"
  local tests="${2:-10}"
  local expect_proc="$3"
  local actual_proc="$4"

  success=true

  if ! ls "$ROOT/elf/"*"$TEST_TYPE.elf" >/dev/null 2>&1; then
    output=$(make "emulate $TEST_TYPE")
    if [[ $? == 1 ]]; then
      echo "::error file={$file},title={Build failed}::$output" 1>&2
      exit 1
    fi
  fi

  for SCHEME in "${SCHEMES[@]}"; do
    file="$ROOT/elf/$SCHEME-$TEST_TYPE.elf"

    # build and emulate
    output=$(make "emulate run" ELF_FILE="$file" && echo -n "x") && true
    if [[ $? == 1 ]]; then
      echo "::error file={$file},title={Emulate failed}::$output" 1>&2
      success=false
      continue
    fi

    output="${output%?}"

    # check for error
    err=$(echo "$output" | awk '/ERROR/{code=1;print $0} END {exit code}') && true
    if [[ $? == 1 ]]; then
      echo "::error file={$file},title={Emulate unexpected}::$err" 1>&2
      success=false
    fi

    # check if is as expected
    actual=$(echo -n "$output" | "$actual_proc")
    expect=$("$expect_proc" "$SCHEME")

    if [[ $actual != "$expect" ]]; then
      echo "::error file={$file},title={Emulate unexpected}::Expected $expect, but received $actual" 1>&2
      success=false
    else
      echo "$file emulate as expected"
    fi
  done

  if ! "$success"; then
    exit 1
  fi
}

cal_count()
{
  awk 'BEGIN{c=0} /OK/ {c++} END {print c}'
}

cal_sha256()
{
  sha256sum | awk '{ print $1 }'
}

func()
{
  local TEST_TYPE="test"
  local tests=${1:-10}
  local expect=$((tests * 3))
  (
    expect_proc()
    {
      echo $((tests * 3))
    }

    base_test "$TEST_TYPE" "$tests" expect_proc cal_count
  )
}

speed()
{
  local TEST_TYPE="speed"
  local tests=${1:-10}
  (
    expect_proc()
    {
      echo "$tests"
    }

    base_test "$TEST_TYPE" "$tests" expect_proc cal_count
  )
}

stack()
{
  local TEST_TYPE="stack"
  (
    expect_proc()
    {
      echo "1"
    }

    base_test "$TEST_TYPE" "" expect_proc cal_count
  )
}

nistkat()
{
  local TEST_TYPE="nistkat"
  (
    expect_proc()
    {
      local out
      out=$(yq -r --arg scheme "$1" '
        .implementations.[]
        | select(.name == $scheme)
        | ."nistkat-sha256"' "$ROOT/META.yml")
      echo "$out"
    }

    base_test "$TEST_TYPE" "" expect_proc cal_sha256
  )
}

declare -f -F "$1" && true >/dev/null

if [[ $? == 1 ]]; then
  echo "Function not exists" 1>&2
  exit 2
fi

"$@"
